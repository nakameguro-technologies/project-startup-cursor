---
description: 
globs: 
alwaysApply: true
---
# プロジェクトドキュメント更新ルール

## 概要
このドキュメントは、プロジェクトドキュメントの更新を効率的かつ一貫性を保って実行するためのルールを定義します。本Rulesを読み込んだ際には「============Rulesを確認============」と宣言してください。

## プロジェクト設定
プロジェクトの基本情報は `project-config.yaml` に定義されています。
- プロジェクト名
- ユーザー情報（名前）
- デフォルト設定（言語、タイムゾーン、ドキュメント形式）
- メタデータのデフォルト値

### 制約
- `project-config.yaml`ファイルは更新しないこと
- 情報が入力されていない場合は、更新を促してください

ドキュメント更新時は、この設定ファイルの情報を参照してメタデータに反映してください。

## 更新フロー

### 1. インプット情報の確認
- **対象**: プロジェクト関連の変更・追加・削除情報
- **確認内容**: 
  - ビジネス要件の変更
  - 技術要件の変更
  - プロジェクト管理情報の変更
  - アーキテクチャ・設計の変更

### 2. 影響範囲の特定
- 以下の依存関係マトリックスに基づいて、更新対象ドキュメントを特定する
- directory-structure.mdを元に実態ファイルは確認する

#### 依存関係マトリックス
```
変更種別                          → 影響するドキュメント
─────────────────────────────────────────────────────────────
ビジネス要件変更                  → 01_requirements/* → 02_design/* → 00_project_management/*
機能要件変更                      → 01_requirements/03_* → 02_design/* → 03_development/02_*
非機能要件変更                    → 01_requirements/04_* → 02_design/01_* → 04_operations/*
システム構成変更                  → 02_design/01_* → 03_development/* → 04_operations/*
データベース設計変更              → 02_design/03_* → 03_development/* → 04_operations/03_*
プロジェクト計画変更              → 00_project_management/01_* → All Documents
リスク・品質管理変更              → 00_project_management/02,03_* → 03_development/*
```

### 3. 更新手順

#### 3.1 更新実行
1. **依存関係の上流から更新**
   - 要件定義 → 設計 → 開発 → 運用 → プロジェクト管理
2. **メタ情報の同期更新**
   - 更新日時
   - バージョン情報
   - 前提ドキュメントは承認なしに更新しないこと
   - 参照されるドキュメントは承認なしに更新しないこと
   - 関連ドキュメントは承認なしに更新しないこと
3. **不明点への対処**
   - インプット情報から読み取れない事項がある場合は[TODO]と記載
   - 作業完了時にTODOは一覧形式で通知

#### 3.2 品質確認
- [ ] 文書間の整合性確認
- [ ] リンク切れチェック
- [ ] 形式統一チェック
- [ ] レビュー実施

### 4. メタ情報管理

#### 各ドキュメント共通メタ情報
```markdown
---
title: "[ドキュメントタイトル]"
version: "X.X"
last_updated: "YYYY-MM-DD"
author: "project-config.yamlのuser.nameを参照"
reviewers: ["レビュー者1", "レビュー者2"]
related_docs: ["関連ドキュメント1", "関連ドキュメント2"]
status: "draft|review|approved|deprecated"
---
```

**注意**: `author`フィールドは `project-config.yaml` で設定されたユーザー名を使用してください。

#### 依存関係がある場合の追加メタ情報
```markdown
dependencies:
  upstream: ["上流ドキュメント1", "上流ドキュメント2"]
  downstream: ["下流ドキュメント1", "下流ドキュメント2"]
impact_level: "high|medium|low"
```

### 5. 自動化ルール

#### 5.1 整合性チェック
- directory-structure.mdとの自動整合性チェック
- 文書間リンクの自動検証

## 更新履歴テンプレート

各ドキュメントの末尾に以下の更新履歴を維持：

```markdown
## 更新履歴

| バージョン | 更新日 | 更新者 | 更新内容 | 影響ドキュメント |
|------------|--------|--------|----------|------------------|
| 1.0        | YYYY-MM-DD | [名前] | 初版作成 | - |
| 1.1        | YYYY-MM-DD | [名前] | [更新内容] | [関連ドキュメント] |
```

## 注意事項

1. **必ず依存関係を考慮**して更新順序を決定する
2. **directory-structure.md**は常に最新の状態を反映する
3. **メタ情報**は更新時に必ず同期更新する
4. **レビュープロセス**を省略しない
5. **バックアップ**を更新前に必ず作成する
6. **時刻**は最新時刻を取得して行うこと

---






*このルールは定期的に見直し、プロジェクトの成熟度に応じて改善していく* 